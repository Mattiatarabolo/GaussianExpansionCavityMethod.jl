var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GaussianExpansionCavityMethod","category":"page"},{"location":"#GaussianExpansionCavityMethod","page":"Home","title":"GaussianExpansionCavityMethod","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GaussianExpansionCavityMethod.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GaussianExpansionCavityMethod]","category":"page"},{"location":"#GaussianExpansionCavityMethod.BMModel","page":"Home","title":"GaussianExpansionCavityMethod.BMModel","text":"BMModel\n\nA type representing the Bouchaud-Mezard model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\nlambdas::Vector{Float64}: The local drift terms. lambdas[i] = J |∂i|, where |∂i| is the degree of site i and J is the uniform coupling strength.\nJ::SparseMatrixCSC{Float64, Integer}: The sparse coupling matrix.\nsigma::Float64: The multiplicative noise strength.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.BMModelEnsemble","page":"Home","title":"GaussianExpansionCavityMethod.BMModelEnsemble","text":"BMModelEnsemble\n\nA type representing the ensemble of disordered Bouchaud-Mezard model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\nlambdas::Vector{Float64}: The local drift terms. lambdas[i] = J |∂i|, where |∂i| is the degree of site i and J is the uniform coupling strength.\ngen_J::Function: The function to generate the sparse coupling matrix.\nJ_params::Vector{Float64}: The parameters for the coupling matrix generator.\nsigma::Float64: The multiplicative noise strength.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.Phi4Model","page":"Home","title":"GaussianExpansionCavityMethod.Phi4Model","text":"Phi4Model\n\nA type representing the Phi^4 model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\nJ::SparseMatrixCSC{Float64, Integer}: The sparse coupling matrix.\nlambdas::Vector{Float64}: The on-site linear terms.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.Phi4ModelEnsemble","page":"Home","title":"GaussianExpansionCavityMethod.Phi4ModelEnsemble","text":"Phi4ModelEnsemble\n\nA type representing the ensemble of disordered Phi^4 model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\ngen_J::Function: The function to generate the sparse coupling matrix.\nJ_params::Vector{Float64}: The parameters for the coupling matrix generator.\nlambdas::Vector{Float64}: The on-site linear terms.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.TwoSpinModel","page":"Home","title":"GaussianExpansionCavityMethod.TwoSpinModel","text":"TwoSpinModel\n\nA type representing the spherical 2-Spin model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\nJ::SparseMatrixCSC{Float64, Integer}: The sparse coupling matrix.\nD::Float64: The noise strength.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.TwoSpinModelEnsemble","page":"Home","title":"GaussianExpansionCavityMethod.TwoSpinModelEnsemble","text":"TwoSpinModelEnsemble\n\nA type representing the ensemble of disordered spherical 2-Spin model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\ngen_J::Function: The function to generate the sparse coupling matrix.\nJ_params::Vector{Float64}: The parameters for the coupling matrix generator.\nD::Float64: The noise strength.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.BMModelRRG-Tuple{Int64, Union{Float64, Int64}, Float64, Float64}","page":"Home","title":"GaussianExpansionCavityMethod.BMModelRRG","text":"BMModelRRG(N, K, J, sigma)\n\nConstruct a Bouchaud-Mezard model with a random regular graph coupling matrix with ferromagnetic interactions.\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\nJ::Float64: The coupling strength.\nsigma::Float64: The multiplicative noise strength.\n\nReturns\n\nBMModelEnsemble: The Bouchaud-Mezard model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.Phi4ModelRRG-Tuple{Int64, Union{Float64, Int64}, Float64, Vector{Float64}, Float64, Float64}","page":"Home","title":"GaussianExpansionCavityMethod.Phi4ModelRRG","text":"Phi4ModelRRG(N, K, J, lambdas, D, u)\n\nConstruct a Phi^4 model with a random regular graph coupling matrix with ferromagnetic interactions.\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\nJ::Float64: The coupling strength.\nlambdas::Vector{Float64}: The on-site linear terms.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\nReturns\n\nPhi4ModelEnsemble: The Phi^4 model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.Phi4ModelRRG-Tuple{Int64, Union{Float64, Int64}, Vararg{Float64, 4}}","page":"Home","title":"GaussianExpansionCavityMethod.Phi4ModelRRG","text":"Phi4ModelRRG(N, K, J, lambda, D, u)\n\nConstruct a Phi^4 model with a random regular graph coupling matrix with ferromagnetic interactions.\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\nJ::Float64: The coupling strength.\nlambda::Float64: The on-site linear term.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\nReturns\n\nPhi4ModelEnsemble: The Phi^4 model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.TwoSpinModelRRG-Tuple{Int64, Union{Float64, Int64}, Float64, Float64}","page":"Home","title":"GaussianExpansionCavityMethod.TwoSpinModelRRG","text":"TwoSpinModelRRG(N, K, J, lambda, D)\n\nConstruct a spherical 2-Spin model with a random regular graph coupling matrix with bimodal interactions.\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\nJ::Float64: The coupling strength.\nD::Float64: The noise strength.\n\nReturns\n\nTwoSpinModelEnsemble: The spherical 2-Spin  model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.TwoSpinModelRRG-Tuple{Int64, Union{Float64, Int64}, Function, Vector{Float64}, Float64}","page":"Home","title":"GaussianExpansionCavityMethod.TwoSpinModelRRG","text":"TwoSpinModelRRG(N, K, J, lambda, D)\n\nConstruct a spherical 2-Spin model with a random regular graph coupling matrix with iid symmetric couplings Jᵢⱼ = Jⱼᵢ ~ p(J).\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\npJ::Function: The coupling distribution.\nJ_params::Vector{Float64}: The parameters for the coupling distribution.\nD::Float64: The noise strength.\n\nReturns\n\nTwoSpinModelEnsemble: The spherical 2-Spin  model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_meanstd-Tuple{Matrix{Float64}}","page":"Home","title":"GaussianExpansionCavityMethod.compute_meanstd","text":"compute_meanvar(trajs)\n\nCompute the mean and standard deviation of the trajectories.\n\narguments\n\ntrajs::Matrix{Float64}: The trajectories. Each column corresponds to a time point.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at discretized time l`.\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at discretized time l.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_meanstd-Tuple{Vector{Matrix{Float64}}}","page":"Home","title":"GaussianExpansionCavityMethod.compute_meanstd","text":"compute_meanstd(sim)\n\nCompute the mean and standard deviation of the trajectories in the ensemble solution object.\n\nArguments\n\nsim::Vector{Matrix{Float64}}: The ensemble solution object. Each element is a matrix where each column corresponds to a time point.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories over nodes and ensemble realizations at discretized time l.\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories over nodes and ensemble realizations at discretized time l.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_stats-Tuple{Matrix{Float64}}","page":"Home","title":"GaussianExpansionCavityMethod.compute_stats","text":"compute_stats(trajs)\n\nCompute the mean, standard deviation and average autocorrelation of the trajectories.\n\nArguments\n\ntrajs::Matrix{Float64}: The trajectories. Each column corresponds to a time point.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at discretized time l.\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at discretized time l.\nautocorr::Matrix{Float64}: The average autocorrelation. The element at index (l, k) is the average autocorrelation of the trajectories at discretized times l and k.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_stats-Tuple{Vector{Matrix{Float64}}}","page":"Home","title":"GaussianExpansionCavityMethod.compute_stats","text":"compute_stats(sim)\n\nCompute the mean, standard deviation and average autocorrelation of the trajectories in the ensemble solution object.\n\nArguments\n\nsim::Vector{Matrix{Float64}}: The ensemble solution object. Each element is a matrix where each column corresponds to a time point.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories over nodes and ensemble realizations at discretized time l.\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories over nodes and ensemble realizations at discretized time l.\nautocorr::Matrix{Float64}: The average autocorrelation. The element at index (l, k) is the average autocorrelation of the trajectories over nodes and ensemble realizations at discretized times l and k.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.integrate_2spin_RRG-Tuple{Int64, Float64, Float64, Int64, Float64}","page":"Home","title":"GaussianExpansionCavityMethod.integrate_2spin_RRG","text":"integrate_2spin_RRG(K, J, D, Nmax, tmax; backup=false, backupfile=\"backup_matrices.jld2\", backupevery=1000)\n\nIntegrate the disorder averaged cavity equations for a 2-spin model on a random regular graph with bimodal interactions.\n\nSrguments\n\nK::Int: The average number of neighbors.\nJ::Float64: The coupling strength.\nD::Float64: The noise strength.\nNmax::Int: The maximum number of timesteps.\ntmax::Float64: The maximum time to integrate to.\n\nKeyword Arguments\n\nbackup::Bool: Whether to save a backup of the matrices every backupevery iterations. Default is false.\nbackupfile::String: The filename for the backup file. Default is \"backup_matrices.jld2\".\nbackupevery::Int: The number of iterations to save a backup every. Default is 1000.\n\nReturns\n\nC::OffsetArray: The disorder averaged autocorrelation C matrix.\nR::OffsetArray: The disorder averaged response R matrix.\nCh::OffsetArray: The disorder averaged cavity autocorrelation Ch matrix.\nRh::OffsetArray: The disorder averaged cavity response Rh matrix.\nmu::OffsetArray: The Lagrange multiplier mu array.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_2Spin-Tuple{TwoSpinModel, Vector{Float64}, Float64, Vector{Float64}}","page":"Home","title":"GaussianExpansionCavityMethod.sample_2Spin","text":"sample_2Spin(model, x0, tmax, tsave; rng=Xoshiro(1234), dt=1e-4)\n\nSample the spherical 2-Spin model using the Euler-Maruyama solver.\n\nArguments\n\nmodel::TwoSpinModel: The spherical 2-Spin model to sample.\nx0::Vector{Float64}: The initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndt::Float64: The time step size (default: 1e-4).\n\nReturns\n\ntvec::Vector{Float64}: The time points.\ntraj::Matrix{Float64}: The trajectories. Each column corresponds to a time point.\nlambda_traj::Vector{Float64}: The Lagrange multipliers at each time point.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_BM-Tuple{BMModel, Vector{Float64}, Float64, Vector{Float64}}","page":"Home","title":"GaussianExpansionCavityMethod.sample_BM","text":"sample_BM(model, x0, tmax, tsave; rng=Xoshiro(1234), diverging_threshold=1e6, dt=1e-3)\n\nSample the Bouchaud-Mezard model using a split-step Euler-Maruyama solver. The local part is solved exactly, while the non-local part is solved using the Euler-Maruyama method.\n\nArguments\n\nmodel::BMModel: The Bouchaud-Mezard model to sample.\nx0::Vector{Float64}: The initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndt::Float64: The time step size (default: 1e-3).\n\nReturns\n\nt_vals::Vector{Float64}: The time points.\ntrajectories::Matrix{Float64}: The trajectories. Each column corresponds to a time point.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_ensemble_2Spin-Tuple{TwoSpinModelEnsemble, Float64, Float64, Float64, Vector{Float64}, Int64}","page":"Home","title":"GaussianExpansionCavityMethod.sample_ensemble_2Spin","text":"sample_ensemble_2Spin(model_ensemble, x0_min, x0_max, tmax, tsave, nsample; rng=Xoshiro(1234), showprogress=false, dt=1e-4)\n\nSample an ensemble of spherical 2-Spin models using solvers from DifferentialEquations.jl.\n\nArguments\n\nmodel_ensemble::TwoSpinModelEnsemble: The ensemble of Phi^4 models to sample.\nx0_min::Float64: The minimum initial condition.\nx0_max::Float64: The maximum initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\nnsample::Int: The number of samples to generate.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\nshowprogress::Bool: Whether to show a progress bar (default: false).\ndt::Float64: The time step size (default: 1e-4).\n\nReturns\n\ntvals_alls::Vector{Vector{Float64}}: The time points for each sample.\ntraj_alls::Vector{Matrix{Float64}}: The trajectories for each sample. Each column corresponds to a time point.\nlambda_traj_alls::Vector{Vector{Float64}}: The Lagrange multipliers for each sample.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_ensemble_BM-Tuple{BMModelEnsemble, Float64, Float64, Float64, Vector{Float64}, Int64}","page":"Home","title":"GaussianExpansionCavityMethod.sample_ensemble_BM","text":"sample_ensemble_BM(model_ensemble, x0_min, x0_max, tmax, tsave, nsample; rng=Xoshiro(1234), diverging_threshold=1e6, showprogress=false, dt=1e-3)\n\nSample an ensemble of Bouchaud-Mezard models using solvers from DifferentialEquations.jl.\n\nArguments\n\nmodel_ensemble::BMModelEnsemble: The ensemble of Phi^4 models to sample.\nx0_min::Float64: The minimum initial condition.\nx0_max::Float64: The maximum initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\nnsample::Int: The number of samples to generate.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndiverging_threshold::Float64: The threshold for detecting diverging solutions (default: 1e6).\nshowprogress::Bool: Whether to show a progress bar (default: false).\ndt::Float64: The time step size (default: 1e-3).\n\nReturns\n\ntvals_alls::Vector{Vector{Float64}}: The time points for each sample.\ntraj_alls::Vector{Matrix{Float64}}: The trajectories for each sample. Each column corresponds to a time point.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_ensemble_phi4-Tuple{Phi4ModelEnsemble, Float64, Float64, Float64, Vector{Float64}, Int64}","page":"Home","title":"GaussianExpansionCavityMethod.sample_ensemble_phi4","text":"sample_ensemble_phi4(model_ensemble, x0_min, x0_max, tmax, tsave, nsample; rng=Xoshiro(1234), diverging_threshold=1e6, showprogress=false, dt=1e-3)\n\nSample an ensemble of Phi^4 models using solvers from DifferentialEquations.jl.\n\nArguments\n\nmodel_ensemble::Phi4ModelEnsemble: The ensemble of Phi^4 models to sample.\nx0_min::Float64: The minimum initial condition.\nx0_max::Float64: The maximum initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\nnsample::Int: The number of samples to generate.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndiverging_threshold::Float64: The threshold for detecting diverging solutions (default: 1e6).\nshowprogress::Bool: Whether to show a progress bar (default: false).\ndt::Float64: The time step size (default: 1e-3).\n\nReturns\n\ntvals_alls::Vector{Vector{Float64}}: The time points for each sample.\ntraj_alls::Vector{Matrix{Float64}}: The trajectories for each sample. Each column corresponds to a time point.\nsim::Vector{RODESolution}: The solution objects for each sample.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_phi4-Tuple{Phi4Model, Vector{Float64}, Float64, Vector{Float64}}","page":"Home","title":"GaussianExpansionCavityMethod.sample_phi4","text":"sample_phi4(model, x0, tmax, tsave; rng=Xoshiro(1234), diverging_threshold=1e6, dt=1e-3)\n\nSample the Phi^4 model using the Euler-Maruyama solver.\n\nArguments\n\nmodel::Phi4Model: The Phi^4 model to sample.\nx0::Vector{Float64}: The initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndiverging_threshold::Float64: The threshold for detecting diverging solutions (default: 1e6).\ndt::Float64: The time step size (default: 1e-3).\n\nReturns\n\nt_vals::Vector{Float64}: The time points.\ntrajectories::Matrix{Float64}: The trajectories. Each column corresponds to a time point.\nsol::RODESolution: The solution object.\n\n\n\n\n\n","category":"method"}]
}

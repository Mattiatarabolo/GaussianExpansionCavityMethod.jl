var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GaussianExpansionCavityMethod","category":"page"},{"location":"#GaussianExpansionCavityMethod","page":"Home","title":"GaussianExpansionCavityMethod","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GaussianExpansionCavityMethod.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GaussianExpansionCavityMethod]","category":"page"},{"location":"#GaussianExpansionCavityMethod.Phi4Model","page":"Home","title":"GaussianExpansionCavityMethod.Phi4Model","text":"Phi4Model\n\nA type representing the Phi^4 model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\nJ::SparseMatrixCSC{Float64, Integer}: The sparse coupling matrix.\nlambdas::Vector{Float64}: The on-site linear terms.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.Phi4ModelEnsemble","page":"Home","title":"GaussianExpansionCavityMethod.Phi4ModelEnsemble","text":"Phi4ModelEnsemble\n\nA type representing the ensemble of disordered Phi^4 model.\n\nFields\n\nN::Integer: The number of sites.\nK::Union{Integer, Float64}: The average number of neighbors.\ngen_J::Function: The function to generate the sparse coupling matrix.\nJ_params::Vector{Float64}: The parameters for the coupling matrix generator.\nlambdas::Vector{Float64}: The on-site linear terms.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianExpansionCavityMethod.Phi4ModelRRG-Tuple{Int64, Union{Float64, Int64}, Float64, Vector{Float64}, Float64, Float64}","page":"Home","title":"GaussianExpansionCavityMethod.Phi4ModelRRG","text":"Phi4ModelRRG(N, K, J, lambdas, D, u)\n\nConstruct a Phi^4 model with a random regular graph coupling matrix with ferromagnetic interactions.\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\nJ::Float64: The coupling strength.\nlambdas::Vector{Float64}: The on-site linear terms.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\nReturns\n\nPhi4ModelEnsemble: The Phi^4 model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.Phi4ModelRRG-Tuple{Int64, Union{Float64, Int64}, Vararg{Float64, 4}}","page":"Home","title":"GaussianExpansionCavityMethod.Phi4ModelRRG","text":"Phi4ModelRRG(N, K, J, lambda, D, u)\n\nConstruct a Phi^4 model with a random regular graph coupling matrix with ferromagnetic interactions.\n\nArguments\n\nN::Integer: The number of sites.\nK::Union{Int, Float64}: The average number of neighbors.\nJ::Float64: The coupling strength.\nlambda::Float64: The on-site linear term.\nD::Float64: The noise strength.\nu::Float64: The cubic perturbative constant.\n\nReturns\n\nPhi4ModelEnsemble: The Phi^4 model.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_meanstd-Tuple{SciMLBase.EnsembleSolution}","page":"Home","title":"GaussianExpansionCavityMethod.compute_meanstd","text":"compute_meanstd(sim)\n\nCompute the mean and standard deviation of the trajectories in the ensemble solution object.\n\nArguments\n\nsim::EnsembleSolution: The ensemble solution object.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at time sim[1].t[l].\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at time sim[1].t[l].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_meanstd-Tuple{SciMLBase.RODESolution}","page":"Home","title":"GaussianExpansionCavityMethod.compute_meanstd","text":"compute_meanvar(sol)\n\nCompute the mean and standard deviation of the trajectories in the solution object.\n\nArguments\n\nsol::RODESolution: The solution object.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at time sol.t[l].\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at time sol.t[l].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_meanstd-Tuple{Vector{SciMLBase.RODESolution}}","page":"Home","title":"GaussianExpansionCavityMethod.compute_meanstd","text":"compute_meanstd(sim)\n\nCompute the mean and standard deviation of the trajectories in the ensemble solution object.\n\nArguments\n\nsim::Vector{RODESolution}: The ensemble solution object, which is a vector of RODESolution objects.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at time sim[1].t[l].\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at time sim[1].t[l].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_stats-Tuple{SciMLBase.EnsembleSolution}","page":"Home","title":"GaussianExpansionCavityMethod.compute_stats","text":"compute_stats(sim)\n\nCompute the mean, standard deviation and average autocorrelation of the trajectories in the ensemble solution object.\n\nArguments\n\nsim::EnsembleSolution: The ensemble solution object.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at time sim[1].t[l].\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at time sim[1].t[l].\nautocorr::Matrix{Float64}: The average autocorrelation. The element at index (l, k) is the average autocorrelation of the trajectories at times sim[1].t[l] and sim[1].t[k].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_stats-Tuple{SciMLBase.RODESolution}","page":"Home","title":"GaussianExpansionCavityMethod.compute_stats","text":"compute_stats(sol)\n\nCompute the mean, standard deviation and average autocorrelation of the trajectories in the solution object.\n\nArguments\n\nsol::RODESolution: The solution object.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at time sol.t[l].\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at time sol.t[l].\nautocorr::Matrix{Float64}: The average autocorrelation. The element at index (l, k) is the average autocorrelation of the trajectories at times sol.t[l] and sol.t[l].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.compute_stats-Tuple{Vector{SciMLBase.RODESolution}}","page":"Home","title":"GaussianExpansionCavityMethod.compute_stats","text":"compute_stats(sim)\n\nCompute the mean, standard deviation and average autocorrelation of the trajectories in the ensemble solution object.\n\nArguments\n\nsim::Vector{RODESolution}: The ensemble solution object, which is a vector of RODESolution objects.\n\nReturns\n\nmean_traj::Vector{Float64}: The mean trajectory. The element at index l is the mean of the trajectories at time sim[1].t[l].\nstd_traj::Vector{Float64}: The standard deviation trajectory. The element at index l is the standard deviation of the trajectories at time sim[1].t[l].\nautocorr::Matrix{Float64}: The average autocorrelation. The element at index (l, k) is the average autocorrelation of the trajectories at times sim[1].t[l] and sim[1].t[k].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_ensemble_phi4-Tuple{Phi4Model, Float64, Float64, Float64, Vector{Float64}, Int64}","page":"Home","title":"GaussianExpansionCavityMethod.sample_ensemble_phi4","text":"sample_ensemble_phi4(model, x0_min, x0_max, tmax, tsave, nsamples; rng=Xoshiro(1234), diverging_threshold=1e6)\n\nSample an ensemble of Phi^4 models using the SOSRI solver from DifferentialEquations.jl.\n\nArguments\n\nmodel::Phi4Model: The Phi^4 model to sample.\nx0_min::Float64: The minimum initial condition.\nx0_max::Float64: The maximum initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\nnsamples::Int: The number of samples to generate.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndiverging_threshold::Float64: The threshold for detecting diverging solutions (default: 1e6).\n\nReturns\n\nsim::EnsembleSolution: The ensemble solution object.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_ensemble_phi4-Tuple{Phi4ModelEnsemble, Float64, Float64, Float64, Vector{Float64}, Int64}","page":"Home","title":"GaussianExpansionCavityMethod.sample_ensemble_phi4","text":"sample_ensemble_phi4(model_ensemble, x0_min, x0_max, tmax, tsave, nsample; rng=Xoshiro(1234), diverging_threshold=1e6, showprogress=false)\n\nSample an ensemble of Phi^4 models using the SOSRI solver from DifferentialEquations.jl.\n\nArguments\n\nmodel_ensemble::Phi4ModelEnsemble: The ensemble of Phi^4 models to sample.\nx0_min::Float64: The minimum initial condition.\nx0_max::Float64: The maximum initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\nnsample::Int: The number of samples to generate.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndiverging_threshold::Float64: The threshold for detecting diverging solutions (default: 1e6).\nshowprogress::Bool: Whether to show a progress bar (default: false).\n\nReturns\n\ntvals_alls::Vector{Vector{Float64}}: The time points for each sample.\ntraj_alls::Vector{Matrix{Float64}}: The trajectories for each sample. Each column corresponds to a time point.\nsim::Vector{RODESolution}: The solution objects for each sample.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianExpansionCavityMethod.sample_phi4-Tuple{Phi4Model, Vector{Float64}, Float64, Vector{Float64}}","page":"Home","title":"GaussianExpansionCavityMethod.sample_phi4","text":"sample_phi4(model, x0, tmax, tsave; rng=Xoshiro(1234), diverging_threshold=1e6)\n\nSample the Phi^4 model using the SOSRI solver from DifferentialEquations.jl.\n\nArguments\n\nmodel::Phi4Model: The Phi^4 model to sample.\nx0::Vector{Float64}: The initial condition.\ntmax::Float64: The maximum time to integrate to.\ntsave::Vector{Float64}: The time points to save the trajectory at.\n\nOptional arguments\n\nrng::AbstractRNG: The random number generator to use (default: Xoshiro(1234)).\ndiverging_threshold::Float64: The threshold for detecting diverging solutions (default: 1e6).\n\nReturns\n\nt_vals::Vector{Float64}: The time points.\ntrajectories::Matrix{Float64}: The trajectories. Each column corresponds to a time point.\nsol::RODESolution: The solution object.\n\n\n\n\n\n","category":"method"}]
}
